name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  node:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    - name: Install deps (if package.json exists)
      run: |
        if [ -f package.json ]; then
          npm ci || npm install
        else
          echo "No package.json, skipping Node lane."
        fi
    - name: Lint
      run: |
        if [ -f package.json ]; then
          npx eslint . || true
          npx prettier -c . || true
        fi
    - name: Check ES Module Compliance
      run: |
        if [ -f scripts/check-es-modules.sh ]; then
          bash scripts/check-es-modules.sh
        else
          echo "ES module check script not found"
          exit 1
        fi
    - name: Tests
      run: |
        if [ -f package.json ]; then
          npm test --silent || echo "No Node tests."
        fi

  python:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    - name: Install deps
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
        if [ -f pyproject.toml ]; then pip install -e . || true; fi
        pip install black ruff pytest || true
    - name: Lint
      run: |
        source .venv/bin/activate
        ruff . || true
        black --check . || true
    - name: Tests
      run: |
        source .venv/bin/activate
        pytest -q || echo "No/failed Python tests."

  harness:
    runs-on: ubuntu-latest
    needs: [node]  # Run after Node lane
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install root deps
        run: npm ci || npm install
      - name: Install backend deps
        run: cd backend && npm ci || npm install
      - name: Build backend
        run: cd backend && npm run build
      - name: Run harness on golden sample
        run: |
          node tools/harness/run-local-pipeline-simple.js \
            --input podcast-automation/test-assets/raw/sample-short.mp4 \
            --goldens podcast-automation/test-assets/goldens/sample-short \
            --env dev
      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: harness-outputs
          path: storage/